-------------------------------BEST FS----------------------------------
Aim:- To Develope Best first search  Algorithm for real world problems.

BEST FIRST SEARCH
 Description: 
In BFS and DFS, when we are at a node, we can consider any of the adjacent as next node. So both BFS and DFS blindly explore paths without considering any cost function. The idea of Best First Search is to use an evaluation function to decide which adjacent is most promising and then explore. 
Algorithm: 
• Define a list, OPEN, consisting solely of a single node, the start node, s. 
• IF the list is empty, return failure.
 • Remove from the list the node n with the best score (the node where f is the minimum), and move it to a list, CLOSED.
 • Expand node n.
 • IF any successor to n is the goal node, return success and the solution (by tracing the path from the goal node to s).
 • FOR each successor node:
 1.apply the evaluation function, f, to the node.
 2. IF the node has not been in either list, add it to OPEN.
 • looping structure by sending the algorithm back to the second step.

Code:-
#include <bits/stdc++.h>
using namespace std;
typedef pair<int, int> pi;

vector<vector<pi> > graph;

// Function for adding edges to graph
void addedge(int x, int y, int cost)
{
	graph[x].push_back(make_pair(cost, y));
	graph[y].push_back(make_pair(cost, x));
}

// Function For Implementing Best First Search
// Gives output path having lowest cost
void best_first_search(int source, int target, int n)
{
	vector<bool> visited(n, false);
	// MIN HEAP priority queue
	priority_queue<pi, vector<pi>, greater<pi> > pq;
	// sorting in pq gets done by first value of pair
	pq.push(make_pair(0, source));
	int s = source;
	visited[s] = true;
	while (!pq.empty()) {
		int x = pq.top().second;
		// Displaying the path having lowest cost
		cout << x << " ";
		pq.pop();
		if (x == target)
			break;

		for (int i = 0; i < graph[x].size(); i++) {
			if (!visited[graph[x][i].second]) {
				visited[graph[x][i].second] = true;
				pq.push(make_pair(graph[x][i].first,graph[x][i].second));
			}
		}
	}
}

// Driver code to test above methods
int main()
{
	// No. of Nodes
	int v = 14;
	graph.resize(v);

	// The nodes shown in above example(by alphabets) are
	// implemented using integers addedge(x,y,cost);
	addedge(0, 1, 3);
	addedge(0, 2, 6);
	addedge(0, 3, 5);
	addedge(1, 4, 9);
	addedge(1, 5, 8);
	addedge(2, 6, 12);
	addedge(2, 7, 14);
	addedge(3, 8, 7);
	addedge(8, 9, 5);
	addedge(8, 10, 6);
	addedge(9, 11, 1);
	addedge(9, 12, 10);
	addedge(9, 13, 2);

	int source = 0;
	int target = 9;

	// Function call
	best_first_search(source, target, v);

	return 0;
}

